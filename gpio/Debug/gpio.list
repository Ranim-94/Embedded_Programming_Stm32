
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000460  08000460  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000460  08000460  00002048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000460  08000460  00002048  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000460  08000460  00002048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000460  08000460  00001460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000464  08000464  00001464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  08000468  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002048  2**0
                  CONTENTS
 10 .bss          0000001c  20000048  20000048  00002048  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000064  20000064  00002048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a38  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000321  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00002dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000112  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010f0  00000000  00000000  0000306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ceb  00000000  00000000  0000415a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000463a  00000000  00000000  00004e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000947f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000528  00000000  00000000  000094c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000099ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000448 	.word	0x08000448

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	08000448 	.word	0x08000448

080001c8 <main>:

	}

} /* End delay*()*/

int main(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0

#endif

#if (RUN_SOFT == 0)
// Resetting GPIO Port D
GPIO_DeInit(GPIOD);
 80001cc:	4802      	ldr	r0, [pc, #8]	@ (80001d8 <main+0x10>)
 80001ce:	f000 f8f5 	bl	80003bc <GPIO_DeInit>
 80001d2:	2300      	movs	r3, #0
#endif



}/* End main()*/
 80001d4:	4618      	mov	r0, r3
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40020c00 	.word	0x40020c00

080001dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80001dc:	480d      	ldr	r0, [pc, #52]	@ (8000214 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80001de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80001e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001e4:	480c      	ldr	r0, [pc, #48]	@ (8000218 <LoopForever+0x6>)
  ldr r1, =_edata
 80001e6:	490d      	ldr	r1, [pc, #52]	@ (800021c <LoopForever+0xa>)
  ldr r2, =_sidata
 80001e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000220 <LoopForever+0xe>)
  movs r3, #0
 80001ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001ec:	e002      	b.n	80001f4 <LoopCopyDataInit>

080001ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001f2:	3304      	adds	r3, #4

080001f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001f8:	d3f9      	bcc.n	80001ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000224 <LoopForever+0x12>)
  ldr r4, =_ebss
 80001fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000228 <LoopForever+0x16>)
  movs r3, #0
 80001fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000200:	e001      	b.n	8000206 <LoopFillZerobss>

08000202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000204:	3204      	adds	r2, #4

08000206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000208:	d3fb      	bcc.n	8000202 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800020a:	f000 f8f9 	bl	8000400 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800020e:	f7ff ffdb 	bl	80001c8 <main>

08000212 <LoopForever>:

LoopForever:
  b LoopForever
 8000212:	e7fe      	b.n	8000212 <LoopForever>
  ldr   r0, =_estack
 8000214:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800021c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000220:	08000468 	.word	0x08000468
  ldr r2, =_sbss
 8000224:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000228:	20000064 	.word	0x20000064

0800022c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800022c:	e7fe      	b.n	800022c <ADC_IRQHandler>
	...

08000230 <GPIOA_RESET>:
void GPIOI_CLK_OFF(void) { 
    RCC->AHB1ENR &= ~(1 << 8); 
}

// GPIO Reset functions
void GPIOA_RESET(void) { 
 8000230:	b480      	push	{r7}
 8000232:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 0);
 8000234:	4b08      	ldr	r3, [pc, #32]	@ (8000258 <GPIOA_RESET+0x28>)
 8000236:	691b      	ldr	r3, [r3, #16]
 8000238:	4a07      	ldr	r2, [pc, #28]	@ (8000258 <GPIOA_RESET+0x28>)
 800023a:	f043 0301 	orr.w	r3, r3, #1
 800023e:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 0);
 8000240:	4b05      	ldr	r3, [pc, #20]	@ (8000258 <GPIOA_RESET+0x28>)
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	4a04      	ldr	r2, [pc, #16]	@ (8000258 <GPIOA_RESET+0x28>)
 8000246:	f023 0301 	bic.w	r3, r3, #1
 800024a:	6113      	str	r3, [r2, #16]
}
 800024c:	bf00      	nop
 800024e:	46bd      	mov	sp, r7
 8000250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800

0800025c <GPIOB_RESET>:
 in the same macro

*/


void GPIOB_RESET(void) { 
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 1);
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <GPIOB_RESET+0x28>)
 8000262:	691b      	ldr	r3, [r3, #16]
 8000264:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <GPIOB_RESET+0x28>)
 8000266:	f043 0302 	orr.w	r3, r3, #2
 800026a:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 1);
 800026c:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <GPIOB_RESET+0x28>)
 800026e:	691b      	ldr	r3, [r3, #16]
 8000270:	4a04      	ldr	r2, [pc, #16]	@ (8000284 <GPIOB_RESET+0x28>)
 8000272:	f023 0302 	bic.w	r3, r3, #2
 8000276:	6113      	str	r3, [r2, #16]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	40023800 	.word	0x40023800

08000288 <GPIOC_RESET>:

void GPIOC_RESET(void) { 
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 2);
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <GPIOC_RESET+0x28>)
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	4a07      	ldr	r2, [pc, #28]	@ (80002b0 <GPIOC_RESET+0x28>)
 8000292:	f043 0304 	orr.w	r3, r3, #4
 8000296:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 2);
 8000298:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <GPIOC_RESET+0x28>)
 800029a:	691b      	ldr	r3, [r3, #16]
 800029c:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <GPIOC_RESET+0x28>)
 800029e:	f023 0304 	bic.w	r3, r3, #4
 80002a2:	6113      	str	r3, [r2, #16]
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40023800 	.word	0x40023800

080002b4 <GPIOD_RESET>:

void GPIOD_RESET(void) { 
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 3);
 80002b8:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <GPIOD_RESET+0x28>)
 80002ba:	691b      	ldr	r3, [r3, #16]
 80002bc:	4a07      	ldr	r2, [pc, #28]	@ (80002dc <GPIOD_RESET+0x28>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 3);
 80002c4:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <GPIOD_RESET+0x28>)
 80002c6:	691b      	ldr	r3, [r3, #16]
 80002c8:	4a04      	ldr	r2, [pc, #16]	@ (80002dc <GPIOD_RESET+0x28>)
 80002ca:	f023 0308 	bic.w	r3, r3, #8
 80002ce:	6113      	str	r3, [r2, #16]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40023800 	.word	0x40023800

080002e0 <GPIOE_RESET>:

void GPIOE_RESET(void) { 
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 4);
 80002e4:	4b08      	ldr	r3, [pc, #32]	@ (8000308 <GPIOE_RESET+0x28>)
 80002e6:	691b      	ldr	r3, [r3, #16]
 80002e8:	4a07      	ldr	r2, [pc, #28]	@ (8000308 <GPIOE_RESET+0x28>)
 80002ea:	f043 0310 	orr.w	r3, r3, #16
 80002ee:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 4);
 80002f0:	4b05      	ldr	r3, [pc, #20]	@ (8000308 <GPIOE_RESET+0x28>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	4a04      	ldr	r2, [pc, #16]	@ (8000308 <GPIOE_RESET+0x28>)
 80002f6:	f023 0310 	bic.w	r3, r3, #16
 80002fa:	6113      	str	r3, [r2, #16]
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800

0800030c <GPIOF_RESET>:

void GPIOF_RESET(void) { 
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 5);
 8000310:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <GPIOF_RESET+0x28>)
 8000312:	691b      	ldr	r3, [r3, #16]
 8000314:	4a07      	ldr	r2, [pc, #28]	@ (8000334 <GPIOF_RESET+0x28>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 5);
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <GPIOF_RESET+0x28>)
 800031e:	691b      	ldr	r3, [r3, #16]
 8000320:	4a04      	ldr	r2, [pc, #16]	@ (8000334 <GPIOF_RESET+0x28>)
 8000322:	f023 0320 	bic.w	r3, r3, #32
 8000326:	6113      	str	r3, [r2, #16]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40023800 	.word	0x40023800

08000338 <GPIOG_RESET>:

void GPIOG_RESET(void) { 
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 6);
 800033c:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <GPIOG_RESET+0x28>)
 800033e:	691b      	ldr	r3, [r3, #16]
 8000340:	4a07      	ldr	r2, [pc, #28]	@ (8000360 <GPIOG_RESET+0x28>)
 8000342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000346:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 6);
 8000348:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <GPIOG_RESET+0x28>)
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <GPIOG_RESET+0x28>)
 800034e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000352:	6113      	str	r3, [r2, #16]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800

08000364 <GPIOH_RESET>:

void GPIOH_RESET(void) { 
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 7);
 8000368:	4b08      	ldr	r3, [pc, #32]	@ (800038c <GPIOH_RESET+0x28>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	4a07      	ldr	r2, [pc, #28]	@ (800038c <GPIOH_RESET+0x28>)
 800036e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000372:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 7);
 8000374:	4b05      	ldr	r3, [pc, #20]	@ (800038c <GPIOH_RESET+0x28>)
 8000376:	691b      	ldr	r3, [r3, #16]
 8000378:	4a04      	ldr	r2, [pc, #16]	@ (800038c <GPIOH_RESET+0x28>)
 800037a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800037e:	6113      	str	r3, [r2, #16]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	40023800 	.word	0x40023800

08000390 <GPIOI_RESET>:

void GPIOI_RESET(void) { 
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
    RCC->AHB1RSTR |= (1 << 8);
 8000394:	4b08      	ldr	r3, [pc, #32]	@ (80003b8 <GPIOI_RESET+0x28>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a07      	ldr	r2, [pc, #28]	@ (80003b8 <GPIOI_RESET+0x28>)
 800039a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800039e:	6113      	str	r3, [r2, #16]
    RCC->AHB1RSTR &= ~(1 << 8);
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <GPIOI_RESET+0x28>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <GPIOI_RESET+0x28>)
 80003a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003aa:	6113      	str	r3, [r2, #16]
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800

080003bc <GPIO_DeInit>:


}/* End GPIO_Init()   */


void GPIO_DeInit(GPIO_RegDef_t *pGPIOx){
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]

	For GPIOx,the correspondent RCC register is RCC_AHB1RSTR
	see section 7.3.5 from reference manual

*/
		for(int i = 0; i < NB_GPIO_PORTS; ++i) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	e010      	b.n	80003ec <GPIO_DeInit+0x30>
		
		if (gpio_reset_table[i].base == pGPIOx) {
 80003ca:	4a0c      	ldr	r2, [pc, #48]	@ (80003fc <GPIO_DeInit+0x40>)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003d2:	687a      	ldr	r2, [r7, #4]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	d106      	bne.n	80003e6 <GPIO_DeInit+0x2a>
			
			gpio_reset_table[i].reset_gpiox();
 80003d8:	4a08      	ldr	r2, [pc, #32]	@ (80003fc <GPIO_DeInit+0x40>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	00db      	lsls	r3, r3, #3
 80003de:	4413      	add	r3, r2
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	4798      	blx	r3
			
			break;
 80003e4:	e006      	b.n	80003f4 <GPIO_DeInit+0x38>
		for(int i = 0; i < NB_GPIO_PORTS; ++i) {
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	3301      	adds	r3, #1
 80003ea:	60fb      	str	r3, [r7, #12]
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2b08      	cmp	r3, #8
 80003f0:	d9eb      	bls.n	80003ca <GPIO_DeInit+0xe>
		}

	} /* End for loop for all ports */

} /* End GPIO_DeInit() */
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000000 	.word	0x20000000

08000400 <__libc_init_array>:
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	4d0d      	ldr	r5, [pc, #52]	@ (8000438 <__libc_init_array+0x38>)
 8000404:	4c0d      	ldr	r4, [pc, #52]	@ (800043c <__libc_init_array+0x3c>)
 8000406:	1b64      	subs	r4, r4, r5
 8000408:	10a4      	asrs	r4, r4, #2
 800040a:	2600      	movs	r6, #0
 800040c:	42a6      	cmp	r6, r4
 800040e:	d109      	bne.n	8000424 <__libc_init_array+0x24>
 8000410:	4d0b      	ldr	r5, [pc, #44]	@ (8000440 <__libc_init_array+0x40>)
 8000412:	4c0c      	ldr	r4, [pc, #48]	@ (8000444 <__libc_init_array+0x44>)
 8000414:	f000 f818 	bl	8000448 <_init>
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	10a4      	asrs	r4, r4, #2
 800041c:	2600      	movs	r6, #0
 800041e:	42a6      	cmp	r6, r4
 8000420:	d105      	bne.n	800042e <__libc_init_array+0x2e>
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f855 3b04 	ldr.w	r3, [r5], #4
 8000428:	4798      	blx	r3
 800042a:	3601      	adds	r6, #1
 800042c:	e7ee      	b.n	800040c <__libc_init_array+0xc>
 800042e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000432:	4798      	blx	r3
 8000434:	3601      	adds	r6, #1
 8000436:	e7f2      	b.n	800041e <__libc_init_array+0x1e>
 8000438:	08000460 	.word	0x08000460
 800043c:	08000460 	.word	0x08000460
 8000440:	08000460 	.word	0x08000460
 8000444:	08000464 	.word	0x08000464

08000448 <_init>:
 8000448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044a:	bf00      	nop
 800044c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800044e:	bc08      	pop	{r3}
 8000450:	469e      	mov	lr, r3
 8000452:	4770      	bx	lr

08000454 <_fini>:
 8000454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000456:	bf00      	nop
 8000458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045a:	bc08      	pop	{r3}
 800045c:	469e      	mov	lr, r3
 800045e:	4770      	bx	lr
