
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000644  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007cc  080007cc  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007cc  080007cc  0000206c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007cc  080007cc  0000206c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007cc  080007cc  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007cc  080007cc  000017cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007d0  080007d0  000017d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080007d4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000206c  2**0
                  CONTENTS
 10 .bss          0000001c  2000006c  2000006c  0000206c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0000206c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c99  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038c  00000000  00000000  00002d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  000030c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00003248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010f0  00000000  00000000  0000335b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d37  00000000  00000000  0000444b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000047a2  00000000  00000000  00005182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009924  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000052c  00000000  00000000  00009968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00009e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007b4 	.word	0x080007b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080007b4 	.word	0x080007b4

080001c8 <delay>:

#define CYCLE 5e5

#define RUN_SOFT 1

void delay(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

	for(int i=0; i<CYCLE; i++){
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	ddf8      	ble.n	80001d4 <delay+0xc>

	}

} /* End delay*()*/
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0007a11f 	.word	0x0007a11f

080001f4 <main>:

int main(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0

// Instantiate structures for button and LED
GPIO_Handle_t gpio_button, gpio_led;

// Configure PA0 as input (USER BUTTON)
gpio_button.gpio_reg_x = GPIOA;
 80001fa:	4b23      	ldr	r3, [pc, #140]	@ (8000288 <main+0x94>)
 80001fc:	613b      	str	r3, [r7, #16]
gpio_button.gpio_pin_conf.GPIO_PinNumber = GPIO_PIN_0;
 80001fe:	2300      	movs	r3, #0
 8000200:	753b      	strb	r3, [r7, #20]
gpio_button.gpio_pin_conf.GPIO_PinMode = IN;
 8000202:	2300      	movs	r3, #0
 8000204:	757b      	strb	r3, [r7, #21]
gpio_button.gpio_pin_conf.GPIO_PinSpeed = LOW;
 8000206:	2300      	movs	r3, #0
 8000208:	75bb      	strb	r3, [r7, #22]
gpio_button.gpio_pin_conf.GPIO_PinPuPdControl = NO_PULLUP; // External pull-down on Discovery board
 800020a:	2300      	movs	r3, #0
 800020c:	75fb      	strb	r3, [r7, #23]

// Configure PA1 as output (LED) - or use PD12 for Discovery board LED
gpio_led.gpio_reg_x = GPIOD; // Change to GPIOD for Discovery board
 800020e:	4b1f      	ldr	r3, [pc, #124]	@ (800028c <main+0x98>)
 8000210:	607b      	str	r3, [r7, #4]
gpio_led.gpio_pin_conf.GPIO_PinNumber = GPIO_PIN_12; // PD12 is the green LED on Discovery
 8000212:	230c      	movs	r3, #12
 8000214:	723b      	strb	r3, [r7, #8]
gpio_led.gpio_pin_conf.GPIO_PinMode = OUT;
 8000216:	2301      	movs	r3, #1
 8000218:	727b      	strb	r3, [r7, #9]
gpio_led.gpio_pin_conf.GPIO_PinSpeed = HIGH;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]
gpio_led.gpio_pin_conf.GPIO_PinOPType = PUSH_PULL;
 800021e:	2300      	movs	r3, #0
 8000220:	733b      	strb	r3, [r7, #12]
gpio_led.gpio_pin_conf.GPIO_PinPuPdControl = NO_PULLUP;
 8000222:	2300      	movs	r3, #0
 8000224:	72fb      	strb	r3, [r7, #11]

// Enable clocks for both GPIO ports
GPIO_PeriClockControl(GPIOA, ON); // For button
 8000226:	2101      	movs	r1, #1
 8000228:	4817      	ldr	r0, [pc, #92]	@ (8000288 <main+0x94>)
 800022a:	f000 f97b 	bl	8000524 <GPIO_PeriClockControl>
GPIO_PeriClockControl(GPIOD, ON); // For LED
 800022e:	2101      	movs	r1, #1
 8000230:	4816      	ldr	r0, [pc, #88]	@ (800028c <main+0x98>)
 8000232:	f000 f977 	bl	8000524 <GPIO_PeriClockControl>

// Initialize both GPIO configurations
GPIO_Init(&gpio_button);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f9ac 	bl	8000598 <GPIO_Init>
GPIO_Init(&gpio_led);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f9a8 	bl	8000598 <GPIO_Init>

	uint8_t button_pressed = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	77bb      	strb	r3, [r7, #30]
	uint8_t last_button_state = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	77fb      	strb	r3, [r7, #31]
	
	while(1){

		uint8_t current_button_state = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 8000250:	2100      	movs	r1, #0
 8000252:	480d      	ldr	r0, [pc, #52]	@ (8000288 <main+0x94>)
 8000254:	f000 fa5f 	bl	8000716 <GPIO_ReadFromInputPin>
 8000258:	4603      	mov	r3, r0
 800025a:	777b      	strb	r3, [r7, #29]
		
		// Detect button press (rising edge) - button is normally low, high when pressed
		if(current_button_state == 1 && last_button_state == 0){
 800025c:	7f7b      	ldrb	r3, [r7, #29]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d10f      	bne.n	8000282 <main+0x8e>
 8000262:	7ffb      	ldrb	r3, [r7, #31]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d10c      	bne.n	8000282 <main+0x8e>
			delay(); // Simple debouncing
 8000268:	f7ff ffae 	bl	80001c8 <delay>
			// Re-read after delay to confirm button is still pressed
			if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == 1){
 800026c:	2100      	movs	r1, #0
 800026e:	4806      	ldr	r0, [pc, #24]	@ (8000288 <main+0x94>)
 8000270:	f000 fa51 	bl	8000716 <GPIO_ReadFromInputPin>
 8000274:	4603      	mov	r3, r0
 8000276:	2b01      	cmp	r3, #1
 8000278:	d103      	bne.n	8000282 <main+0x8e>
				GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_12); // Toggle LED
 800027a:	210c      	movs	r1, #12
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <main+0x98>)
 800027e:	f000 fa60 	bl	8000742 <GPIO_ToggleOutputPin>
			}
		}
		
		last_button_state = current_button_state;
 8000282:	7f7b      	ldrb	r3, [r7, #29]
 8000284:	77fb      	strb	r3, [r7, #31]
	while(1){
 8000286:	e7e3      	b.n	8000250 <main+0x5c>
 8000288:	40020000 	.word	0x40020000
 800028c:	40020c00 	.word	0x40020c00

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	@ (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	@ (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	@ (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	@ (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	@ (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	@ (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 fa55 	bl	800076c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff97 	bl	80001f4 <main>

080002c6 <LoopForever>:

LoopForever:
  b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80002d4:	080007d4 	.word	0x080007d4
  ldr r2, =_sbss
 80002d8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80002dc:	20000088 	.word	0x20000088

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <GPIOA_CLK_ON>:

#include "gpio_driver.h"

// GPIO Clock control functions
void GPIOA_CLK_ON(void) { 
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0); 
 80002e8:	4b05      	ldr	r3, [pc, #20]	@ (8000300 <GPIOA_CLK_ON+0x1c>)
 80002ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ec:	4a04      	ldr	r2, [pc, #16]	@ (8000300 <GPIOA_CLK_ON+0x1c>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023800 	.word	0x40023800

08000304 <GPIOA_CLK_OFF>:

void GPIOA_CLK_OFF(void) { 
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 0); 
 8000308:	4b05      	ldr	r3, [pc, #20]	@ (8000320 <GPIOA_CLK_OFF+0x1c>)
 800030a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030c:	4a04      	ldr	r2, [pc, #16]	@ (8000320 <GPIOA_CLK_OFF+0x1c>)
 800030e:	f023 0301 	bic.w	r3, r3, #1
 8000312:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800

08000324 <GPIOB_CLK_ON>:

void GPIOB_CLK_ON(void) { 
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 1); 
 8000328:	4b05      	ldr	r3, [pc, #20]	@ (8000340 <GPIOB_CLK_ON+0x1c>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032c:	4a04      	ldr	r2, [pc, #16]	@ (8000340 <GPIOB_CLK_ON+0x1c>)
 800032e:	f043 0302 	orr.w	r3, r3, #2
 8000332:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800

08000344 <GPIOB_CLK_OFF>:

void GPIOB_CLK_OFF(void) { 
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 1); 
 8000348:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <GPIOB_CLK_OFF+0x1c>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <GPIOB_CLK_OFF+0x1c>)
 800034e:	f023 0302 	bic.w	r3, r3, #2
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	40023800 	.word	0x40023800

08000364 <GPIOC_CLK_ON>:

void GPIOC_CLK_ON(void) { 
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2); 
 8000368:	4b05      	ldr	r3, [pc, #20]	@ (8000380 <GPIOC_CLK_ON+0x1c>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036c:	4a04      	ldr	r2, [pc, #16]	@ (8000380 <GPIOC_CLK_ON+0x1c>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800

08000384 <GPIOC_CLK_OFF>:

void GPIOC_CLK_OFF(void) { 
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 2); 
 8000388:	4b05      	ldr	r3, [pc, #20]	@ (80003a0 <GPIOC_CLK_OFF+0x1c>)
 800038a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038c:	4a04      	ldr	r2, [pc, #16]	@ (80003a0 <GPIOC_CLK_OFF+0x1c>)
 800038e:	f023 0304 	bic.w	r3, r3, #4
 8000392:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000394:	bf00      	nop
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40023800 	.word	0x40023800

080003a4 <GPIOD_CLK_ON>:

void GPIOD_CLK_ON(void) { 
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 3); 
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <GPIOD_CLK_ON+0x1c>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a04      	ldr	r2, [pc, #16]	@ (80003c0 <GPIOD_CLK_ON+0x1c>)
 80003ae:	f043 0308 	orr.w	r3, r3, #8
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40023800 	.word	0x40023800

080003c4 <GPIOD_CLK_OFF>:

void GPIOD_CLK_OFF(void) { 
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 3); 
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <GPIOD_CLK_OFF+0x1c>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a04      	ldr	r2, [pc, #16]	@ (80003e0 <GPIOD_CLK_OFF+0x1c>)
 80003ce:	f023 0308 	bic.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40023800 	.word	0x40023800

080003e4 <GPIOE_CLK_ON>:

void GPIOE_CLK_ON(void) { 
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 4); 
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <GPIOE_CLK_ON+0x1c>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a04      	ldr	r2, [pc, #16]	@ (8000400 <GPIOE_CLK_ON+0x1c>)
 80003ee:	f043 0310 	orr.w	r3, r3, #16
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40023800 	.word	0x40023800

08000404 <GPIOE_CLK_OFF>:

void GPIOE_CLK_OFF(void) { 
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 4); 
 8000408:	4b05      	ldr	r3, [pc, #20]	@ (8000420 <GPIOE_CLK_OFF+0x1c>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040c:	4a04      	ldr	r2, [pc, #16]	@ (8000420 <GPIOE_CLK_OFF+0x1c>)
 800040e:	f023 0310 	bic.w	r3, r3, #16
 8000412:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40023800 	.word	0x40023800

08000424 <GPIOF_CLK_ON>:

void GPIOF_CLK_ON(void) { 
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 5); 
 8000428:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <GPIOF_CLK_ON+0x1c>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042c:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <GPIOF_CLK_ON+0x1c>)
 800042e:	f043 0320 	orr.w	r3, r3, #32
 8000432:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	40023800 	.word	0x40023800

08000444 <GPIOF_CLK_OFF>:

void GPIOF_CLK_OFF(void) { 
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 5); 
 8000448:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <GPIOF_CLK_OFF+0x1c>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800044c:	4a04      	ldr	r2, [pc, #16]	@ (8000460 <GPIOF_CLK_OFF+0x1c>)
 800044e:	f023 0320 	bic.w	r3, r3, #32
 8000452:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40023800 	.word	0x40023800

08000464 <GPIOG_CLK_ON>:

void GPIOG_CLK_ON(void) { 
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 6); 
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <GPIOG_CLK_ON+0x1c>)
 800046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <GPIOG_CLK_ON+0x1c>)
 800046e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000472:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40023800 	.word	0x40023800

08000484 <GPIOG_CLK_OFF>:

void GPIOG_CLK_OFF(void) { 
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 6); 
 8000488:	4b05      	ldr	r3, [pc, #20]	@ (80004a0 <GPIOG_CLK_OFF+0x1c>)
 800048a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048c:	4a04      	ldr	r2, [pc, #16]	@ (80004a0 <GPIOG_CLK_OFF+0x1c>)
 800048e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000492:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40023800 	.word	0x40023800

080004a4 <GPIOH_CLK_ON>:

void GPIOH_CLK_ON(void) { 
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 7); 
 80004a8:	4b05      	ldr	r3, [pc, #20]	@ (80004c0 <GPIOH_CLK_ON+0x1c>)
 80004aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ac:	4a04      	ldr	r2, [pc, #16]	@ (80004c0 <GPIOH_CLK_ON+0x1c>)
 80004ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004b2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800

080004c4 <GPIOH_CLK_OFF>:

void GPIOH_CLK_OFF(void) { 
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 7); 
 80004c8:	4b05      	ldr	r3, [pc, #20]	@ (80004e0 <GPIOH_CLK_OFF+0x1c>)
 80004ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <GPIOH_CLK_OFF+0x1c>)
 80004ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d4:	bf00      	nop
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40023800 	.word	0x40023800

080004e4 <GPIOI_CLK_ON>:

void GPIOI_CLK_ON(void) { 
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 8); 
 80004e8:	4b05      	ldr	r3, [pc, #20]	@ (8000500 <GPIOI_CLK_ON+0x1c>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <GPIOI_CLK_ON+0x1c>)
 80004ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <GPIOI_CLK_OFF>:

void GPIOI_CLK_OFF(void) { 
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 8); 
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <GPIOI_CLK_OFF+0x1c>)
 800050a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050c:	4a04      	ldr	r2, [pc, #16]	@ (8000520 <GPIOI_CLK_OFF+0x1c>)
 800050e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000512:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000514:	bf00      	nop
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40023800 	.word	0x40023800

08000524 <GPIO_PeriClockControl>:
	{GPIOH, GPIOH_RESET},
	{GPIOI, GPIOI_RESET}
};

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,		
						  uint8_t ON_OFF){
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	460b      	mov	r3, r1
 800052e:	70fb      	strb	r3, [r7, #3]

	   for (int i = 0; i < NB_GPIO_PORTS; ++i) {
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	e026      	b.n	8000584 <GPIO_PeriClockControl+0x60>

        if (gpio_clk_map[i].base == pGPIOx) {
 8000536:	4917      	ldr	r1, [pc, #92]	@ (8000594 <GPIO_PeriClockControl+0x70>)
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	4613      	mov	r3, r2
 800053c:	005b      	lsls	r3, r3, #1
 800053e:	4413      	add	r3, r2
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	440b      	add	r3, r1
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	429a      	cmp	r2, r3
 800054a:	d118      	bne.n	800057e <GPIO_PeriClockControl+0x5a>
            if (ON_OFF == ON)
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d10a      	bne.n	8000568 <GPIO_PeriClockControl+0x44>
                gpio_clk_map[i].clk_on();
 8000552:	4910      	ldr	r1, [pc, #64]	@ (8000594 <GPIO_PeriClockControl+0x70>)
 8000554:	68fa      	ldr	r2, [r7, #12]
 8000556:	4613      	mov	r3, r2
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	4413      	add	r3, r2
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	440b      	add	r3, r1
 8000560:	3304      	adds	r3, #4
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4798      	blx	r3
            else
                gpio_clk_map[i].clk_off();
            break;
 8000566:	e011      	b.n	800058c <GPIO_PeriClockControl+0x68>
                gpio_clk_map[i].clk_off();
 8000568:	490a      	ldr	r1, [pc, #40]	@ (8000594 <GPIO_PeriClockControl+0x70>)
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	4613      	mov	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4413      	add	r3, r2
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	440b      	add	r3, r1
 8000576:	3308      	adds	r3, #8
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4798      	blx	r3
            break;
 800057c:	e006      	b.n	800058c <GPIO_PeriClockControl+0x68>
	   for (int i = 0; i < NB_GPIO_PORTS; ++i) {
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	60fb      	str	r3, [r7, #12]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b08      	cmp	r3, #8
 8000588:	d9d5      	bls.n	8000536 <GPIO_PeriClockControl+0x12>
        }
    } /* End for loop for all ports */


} /* End GPIO_PeriClockControl() */
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3710      	adds	r7, #16
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000000 	.word	0x20000000

08000598 <GPIO_Init>:

// =========================================================


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	

	//1. we speicify if we are in 
	// Interrupt or non interrupt mode

	if(pGPIOHandle->gpio_pin_conf.GPIO_PinMode < ANALOG){
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	2b02      	cmp	r3, #2
 80005a6:	f200 80b0 	bhi.w	800070a <GPIO_Init+0x172>
	// Here we are in non interrupt mode	

	// 1.1. Configure the mode of the pin

	// Clear the bits first
	pGPIOHandle->gpio_reg_x->MODER &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	681a      	ldr	r2, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	2103      	movs	r1, #3
 80005b8:	fa01 f303 	lsl.w	r3, r1, r3
 80005bc:	43db      	mvns	r3, r3
 80005be:	4619      	mov	r1, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	400a      	ands	r2, r1
 80005c6:	601a      	str	r2, [r3, #0]
	// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number	
	
	// Now we can set the mode
	pGPIOHandle->gpio_reg_x->MODER |=  pGPIOHandle->gpio_pin_conf.GPIO_PinMode << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);	 
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	4619      	mov	r1, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	fa01 f303 	lsl.w	r3, r1, r3
 80005de:	4619      	mov	r1, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
	
	// Now we start by the othe registers, speed, output type, pull up and pull down resistor

	// 1.2. Configure the speed 
		// Clear the bits first
	pGPIOHandle->gpio_reg_x->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	689a      	ldr	r2, [r3, #8]
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	791b      	ldrb	r3, [r3, #4]
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	2103      	movs	r1, #3
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	43db      	mvns	r3, r3
 80005fc:	4619      	mov	r1, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	400a      	ands	r2, r1
 8000604:	609a      	str	r2, [r3, #8]
		// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number
	
		// Now we can set the speed
	pGPIOHandle->gpio_reg_x->OSPEEDR |= (pGPIOHandle->gpio_pin_conf.GPIO_PinSpeed << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	689a      	ldr	r2, [r3, #8]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	791b      	ldrb	r3, [r3, #4]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	fa01 f303 	lsl.w	r3, r1, r3
 800061c:	4619      	mov	r1, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	430a      	orrs	r2, r1
 8000624:	609a      	str	r2, [r3, #8]

	// 1.3. Configure the output type

	//Clear the bits first
	pGPIOHandle->gpio_reg_x->OTYPER &= ~(0x1 << pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	2301      	movs	r3, #1
 8000634:	408b      	lsls	r3, r1
 8000636:	43db      	mvns	r3, r3
 8000638:	4619      	mov	r1, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	400a      	ands	r2, r1
 8000640:	605a      	str	r2, [r3, #4]
	// 0x1 is 01 in binary, so we clear the bit corresponding to the pin number
	
	// Now we can set the output type
	pGPIOHandle->gpio_reg_x->OTYPER |= (pGPIOHandle->gpio_pin_conf.GPIO_PinOPType << pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	685a      	ldr	r2, [r3, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	7a1b      	ldrb	r3, [r3, #8]
 800064c:	4619      	mov	r1, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	791b      	ldrb	r3, [r3, #4]
 8000652:	fa01 f303 	lsl.w	r3, r1, r3
 8000656:	4619      	mov	r1, r3
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	430a      	orrs	r2, r1
 800065e:	605a      	str	r2, [r3, #4]

	// 1.4. Configure the pull up and pull down resistor

	// Clear the bits first
	pGPIOHandle->gpio_reg_x->PUPDR &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	68da      	ldr	r2, [r3, #12]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	2103      	movs	r1, #3
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	43db      	mvns	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	400a      	ands	r2, r1
 800067c:	60da      	str	r2, [r3, #12]
	// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number
	
	// Now we can set the pull up and pull down resistor
	pGPIOHandle->gpio_reg_x->PUPDR |= (pGPIOHandle->gpio_pin_conf.GPIO_PinPuPdControl << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	79db      	ldrb	r3, [r3, #7]
 8000688:	4619      	mov	r1, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	791b      	ldrb	r3, [r3, #4]
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	430a      	orrs	r2, r1
 800069c:	60da      	str	r2, [r3, #12]

	/* Configure alternate function*/

	if (pGPIOHandle->gpio_pin_conf.GPIO_PinMode == ALT){
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	795b      	ldrb	r3, [r3, #5]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d131      	bne.n	800070a <GPIO_Init+0x172>

		uint8_t temp1, temp2;
		
		temp1 = pGPIOHandle->gpio_pin_conf.GPIO_PinNumber/8;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	08db      	lsrs	r3, r3, #3
 80006ac:	73fb      	strb	r3, [r7, #15]
		// this will give us the index of the AFR register
		// if AFR[0] or AFR[1]

		// Now which bit position in the AFR register
		temp2 = pGPIOHandle->gpio_pin_conf.GPIO_PinNumber % 8;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	791b      	ldrb	r3, [r3, #4]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	73bb      	strb	r3, [r7, #14]

		// Clearing the bits in the AFR register first
		pGPIOHandle->gpio_reg_x->AFR[temp1] &= ~(0xF << (4 * temp2));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	7bfa      	ldrb	r2, [r7, #15]
 80006be:	3208      	adds	r2, #8
 80006c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	220f      	movs	r2, #15
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	4618      	mov	r0, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	7bfa      	ldrb	r2, [r7, #15]
 80006d8:	4001      	ands	r1, r0
 80006da:	3208      	adds	r2, #8
 80006dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// 0xF is 1111, so we clear the 4 bits corresponding to the pin number

		// Now we can set the alternate function register  
		pGPIOHandle->gpio_reg_x->AFR[temp1] |= (pGPIOHandle->gpio_pin_conf.GPIO_PinAltFunMode << (4 * temp2));
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	7bfa      	ldrb	r2, [r7, #15]
 80006e6:	3208      	adds	r2, #8
 80006e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7a5b      	ldrb	r3, [r3, #9]
 80006f0:	461a      	mov	r2, r3
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	fa02 f303 	lsl.w	r3, r2, r3
 80006fa:	4618      	mov	r0, r3
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	7bfa      	ldrb	r2, [r7, #15]
 8000702:	4301      	orrs	r1, r0
 8000704:	3208      	adds	r2, #8
 8000706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	} /* End if(pin Mode< ANALOG) */


}/* End GPIO_Init()   */
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <GPIO_ReadFromInputPin>:

} /* End GPIO_DeInit() */


uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,
							  uint8_t PinNumber){
 8000716:	b480      	push	{r7}
 8000718:	b085      	sub	sp, #20
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]


uint8_t value;

value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x1) ;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	fa22 f303 	lsr.w	r3, r2, r3
 800072c:	b2db      	uxtb	r3, r3
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]

Don't forget to cast the result to uint8_t


*/
return value;
 8000734:	7bfb      	ldrb	r3, [r7, #15]



} /* End GPIO_ReadFromInputPin() */
 8000736:	4618      	mov	r0, r3
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr

08000742 <GPIO_ToggleOutputPin>:
pGPIOx->ODR = Value; // Write value to the entire ODR register

} /* End GPIO_WriteToOutputPort() */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, 
                         uint8_t PinNumber){
 8000742:	b480      	push	{r7}
 8000744:	b083      	sub	sp, #12
 8000746:	af00      	add	r7, sp, #0
 8000748:	6078      	str	r0, [r7, #4]
 800074a:	460b      	mov	r3, r1
 800074c:	70fb      	strb	r3, [r7, #3]


	pGPIOx->ODR ^= (1 << PinNumber);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	78fa      	ldrb	r2, [r7, #3]
 8000754:	2101      	movs	r1, #1
 8000756:	fa01 f202 	lsl.w	r2, r1, r2
 800075a:	405a      	eors	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	615a      	str	r2, [r3, #20]
We shift 1 to the left by PinNumber to get the bit corresponding to the pin number

Then we XOR the ODR register with this value */


} /* End GPIO_ToggleOutputPin() */
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <__libc_init_array>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	4d0d      	ldr	r5, [pc, #52]	@ (80007a4 <__libc_init_array+0x38>)
 8000770:	4c0d      	ldr	r4, [pc, #52]	@ (80007a8 <__libc_init_array+0x3c>)
 8000772:	1b64      	subs	r4, r4, r5
 8000774:	10a4      	asrs	r4, r4, #2
 8000776:	2600      	movs	r6, #0
 8000778:	42a6      	cmp	r6, r4
 800077a:	d109      	bne.n	8000790 <__libc_init_array+0x24>
 800077c:	4d0b      	ldr	r5, [pc, #44]	@ (80007ac <__libc_init_array+0x40>)
 800077e:	4c0c      	ldr	r4, [pc, #48]	@ (80007b0 <__libc_init_array+0x44>)
 8000780:	f000 f818 	bl	80007b4 <_init>
 8000784:	1b64      	subs	r4, r4, r5
 8000786:	10a4      	asrs	r4, r4, #2
 8000788:	2600      	movs	r6, #0
 800078a:	42a6      	cmp	r6, r4
 800078c:	d105      	bne.n	800079a <__libc_init_array+0x2e>
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f855 3b04 	ldr.w	r3, [r5], #4
 8000794:	4798      	blx	r3
 8000796:	3601      	adds	r6, #1
 8000798:	e7ee      	b.n	8000778 <__libc_init_array+0xc>
 800079a:	f855 3b04 	ldr.w	r3, [r5], #4
 800079e:	4798      	blx	r3
 80007a0:	3601      	adds	r6, #1
 80007a2:	e7f2      	b.n	800078a <__libc_init_array+0x1e>
 80007a4:	080007cc 	.word	0x080007cc
 80007a8:	080007cc 	.word	0x080007cc
 80007ac:	080007cc 	.word	0x080007cc
 80007b0:	080007d0 	.word	0x080007d0

080007b4 <_init>:
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b6:	bf00      	nop
 80007b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ba:	bc08      	pop	{r3}
 80007bc:	469e      	mov	lr, r3
 80007be:	4770      	bx	lr

080007c0 <_fini>:
 80007c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007c2:	bf00      	nop
 80007c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c6:	bc08      	pop	{r3}
 80007c8:	469e      	mov	lr, r3
 80007ca:	4770      	bx	lr
