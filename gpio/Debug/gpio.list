
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000063c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007c4  080007c4  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007c4  080007c4  0000206c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007c4  080007c4  0000206c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007c4  080007c4  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007c4  080007c4  000017c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007c8  080007c8  000017c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080007cc  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000206c  2**0
                  CONTENTS
 10 .bss          0000001c  2000006c  2000006c  0000206c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0000206c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c8b  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038c  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010f0  00000000  00000000  0000334b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d36  00000000  00000000  0000443b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004793  00000000  00000000  00005171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009904  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000052c  00000000  00000000  00009948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00009e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007ac 	.word	0x080007ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080007ac 	.word	0x080007ac

080001c8 <delay>:

#define CYCLE 1e3

#define RUN_SOFT 1

void delay(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

	for(int i=0; i<CYCLE; i++){
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80001e0:	dbf8      	blt.n	80001d4 <delay+0xc>

	}

} /* End delay*()*/
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr

080001f0 <main>:

int main(void){
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0

// Instantiate structures for button and LED
GPIO_Handle_t gpio_button, gpio_led;

// Configure PA0 as input (USER BUTTON)
gpio_button.gpio_reg_x = GPIOA;
 80001f6:	4b22      	ldr	r3, [pc, #136]	@ (8000280 <main+0x90>)
 80001f8:	613b      	str	r3, [r7, #16]
gpio_button.gpio_pin_conf.GPIO_PinNumber = GPIO_PIN_0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	753b      	strb	r3, [r7, #20]
gpio_button.gpio_pin_conf.GPIO_PinMode = IN;
 80001fe:	2300      	movs	r3, #0
 8000200:	757b      	strb	r3, [r7, #21]
gpio_button.gpio_pin_conf.GPIO_PinSpeed = LOW;
 8000202:	2300      	movs	r3, #0
 8000204:	75bb      	strb	r3, [r7, #22]
gpio_button.gpio_pin_conf.GPIO_PinPuPdControl = NO_PULLUP; // External pull-down on Discovery board
 8000206:	2300      	movs	r3, #0
 8000208:	75fb      	strb	r3, [r7, #23]

// Configure PD12 as output (LED) - or use PD12 for Discovery board LED
gpio_led.gpio_reg_x = GPIOD; // Change to GPIOD for Discovery board
 800020a:	4b1e      	ldr	r3, [pc, #120]	@ (8000284 <main+0x94>)
 800020c:	607b      	str	r3, [r7, #4]

// PD12 is the green LED on Discovery
gpio_led.gpio_pin_conf.GPIO_PinNumber = GPIO_PIN_12; 
 800020e:	230c      	movs	r3, #12
 8000210:	723b      	strb	r3, [r7, #8]
gpio_led.gpio_pin_conf.GPIO_PinMode = OUT;
 8000212:	2301      	movs	r3, #1
 8000214:	727b      	strb	r3, [r7, #9]
gpio_led.gpio_pin_conf.GPIO_PinSpeed = HIGH;
 8000216:	2302      	movs	r3, #2
 8000218:	72bb      	strb	r3, [r7, #10]
gpio_led.gpio_pin_conf.GPIO_PinOPType = PUSH_PULL;
 800021a:	2300      	movs	r3, #0
 800021c:	733b      	strb	r3, [r7, #12]
gpio_led.gpio_pin_conf.GPIO_PinPuPdControl = NO_PULLUP;
 800021e:	2300      	movs	r3, #0
 8000220:	72fb      	strb	r3, [r7, #11]

// Enable clocks for both GPIO ports
GPIO_PeriClockControl(GPIOA, ON); // For button
 8000222:	2101      	movs	r1, #1
 8000224:	4816      	ldr	r0, [pc, #88]	@ (8000280 <main+0x90>)
 8000226:	f000 f979 	bl	800051c <GPIO_PeriClockControl>
GPIO_PeriClockControl(GPIOD, ON); // For LED
 800022a:	2101      	movs	r1, #1
 800022c:	4815      	ldr	r0, [pc, #84]	@ (8000284 <main+0x94>)
 800022e:	f000 f975 	bl	800051c <GPIO_PeriClockControl>

// Initialize both GPIO configurations
GPIO_Init(&gpio_button);
 8000232:	f107 0310 	add.w	r3, r7, #16
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f9aa 	bl	8000590 <GPIO_Init>
GPIO_Init(&gpio_led);
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f9a6 	bl	8000590 <GPIO_Init>

	uint8_t last_button_state = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	77fb      	strb	r3, [r7, #31]
	
	while(1){

		uint8_t current_button_state = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 8000248:	2100      	movs	r1, #0
 800024a:	480d      	ldr	r0, [pc, #52]	@ (8000280 <main+0x90>)
 800024c:	f000 fa5f 	bl	800070e <GPIO_ReadFromInputPin>
 8000250:	4603      	mov	r3, r0
 8000252:	77bb      	strb	r3, [r7, #30]
		
		// Detect button press (rising edge) - button is normally low, high when pressed
		if(current_button_state == 1 && last_button_state == 0){
 8000254:	7fbb      	ldrb	r3, [r7, #30]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d10f      	bne.n	800027a <main+0x8a>
 800025a:	7ffb      	ldrb	r3, [r7, #31]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10c      	bne.n	800027a <main+0x8a>
			
			delay(); // Simple debouncing
 8000260:	f7ff ffb2 	bl	80001c8 <delay>
			
			// Re-read after delay to confirm button is still pressed
			if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == 1)
 8000264:	2100      	movs	r1, #0
 8000266:	4806      	ldr	r0, [pc, #24]	@ (8000280 <main+0x90>)
 8000268:	f000 fa51 	bl	800070e <GPIO_ReadFromInputPin>
 800026c:	4603      	mov	r3, r0
 800026e:	2b01      	cmp	r3, #1
 8000270:	d103      	bne.n	800027a <main+0x8a>
				GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_12);// Toggle LED
 8000272:	210c      	movs	r1, #12
 8000274:	4803      	ldr	r0, [pc, #12]	@ (8000284 <main+0x94>)
 8000276:	f000 fa60 	bl	800073a <GPIO_ToggleOutputPin>

		} /* End if (edge detection)*/
		
		last_button_state = current_button_state;
 800027a:	7fbb      	ldrb	r3, [r7, #30]
 800027c:	77fb      	strb	r3, [r7, #31]
	while(1){
 800027e:	e7e3      	b.n	8000248 <main+0x58>
 8000280:	40020000 	.word	0x40020000
 8000284:	40020c00 	.word	0x40020c00

08000288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000288:	480d      	ldr	r0, [pc, #52]	@ (80002c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800028c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000290:	480c      	ldr	r0, [pc, #48]	@ (80002c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000292:	490d      	ldr	r1, [pc, #52]	@ (80002c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000294:	4a0d      	ldr	r2, [pc, #52]	@ (80002cc <LoopForever+0xe>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000298:	e002      	b.n	80002a0 <LoopCopyDataInit>

0800029a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800029c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029e:	3304      	adds	r3, #4

080002a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a4:	d3f9      	bcc.n	800029a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a6:	4a0a      	ldr	r2, [pc, #40]	@ (80002d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a8:	4c0a      	ldr	r4, [pc, #40]	@ (80002d4 <LoopForever+0x16>)
  movs r3, #0
 80002aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002ac:	e001      	b.n	80002b2 <LoopFillZerobss>

080002ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b0:	3204      	adds	r2, #4

080002b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b4:	d3fb      	bcc.n	80002ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b6:	f000 fa55 	bl	8000764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ba:	f7ff ff99 	bl	80001f0 <main>

080002be <LoopForever>:

LoopForever:
  b LoopForever
 80002be:	e7fe      	b.n	80002be <LoopForever>
  ldr   r0, =_estack
 80002c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80002cc:	080007cc 	.word	0x080007cc
  ldr r2, =_sbss
 80002d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80002d4:	20000088 	.word	0x20000088

080002d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d8:	e7fe      	b.n	80002d8 <ADC_IRQHandler>
	...

080002dc <GPIOA_CLK_ON>:

#include "gpio_driver.h"

// GPIO Clock control functions
void GPIOA_CLK_ON(void) { 
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0); 
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <GPIOA_CLK_ON+0x1c>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <GPIOA_CLK_ON+0x1c>)
 80002e6:	f043 0301 	orr.w	r3, r3, #1
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40023800 	.word	0x40023800

080002fc <GPIOA_CLK_OFF>:

void GPIOA_CLK_OFF(void) { 
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 0); 
 8000300:	4b05      	ldr	r3, [pc, #20]	@ (8000318 <GPIOA_CLK_OFF+0x1c>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a04      	ldr	r2, [pc, #16]	@ (8000318 <GPIOA_CLK_OFF+0x1c>)
 8000306:	f023 0301 	bic.w	r3, r3, #1
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800

0800031c <GPIOB_CLK_ON>:

void GPIOB_CLK_ON(void) { 
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 1); 
 8000320:	4b05      	ldr	r3, [pc, #20]	@ (8000338 <GPIOB_CLK_ON+0x1c>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a04      	ldr	r2, [pc, #16]	@ (8000338 <GPIOB_CLK_ON+0x1c>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800

0800033c <GPIOB_CLK_OFF>:

void GPIOB_CLK_OFF(void) { 
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 1); 
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <GPIOB_CLK_OFF+0x1c>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000344:	4a04      	ldr	r2, [pc, #16]	@ (8000358 <GPIOB_CLK_OFF+0x1c>)
 8000346:	f023 0302 	bic.w	r3, r3, #2
 800034a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40023800 	.word	0x40023800

0800035c <GPIOC_CLK_ON>:

void GPIOC_CLK_ON(void) { 
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2); 
 8000360:	4b05      	ldr	r3, [pc, #20]	@ (8000378 <GPIOC_CLK_ON+0x1c>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000364:	4a04      	ldr	r2, [pc, #16]	@ (8000378 <GPIOC_CLK_ON+0x1c>)
 8000366:	f043 0304 	orr.w	r3, r3, #4
 800036a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	40023800 	.word	0x40023800

0800037c <GPIOC_CLK_OFF>:

void GPIOC_CLK_OFF(void) { 
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 2); 
 8000380:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <GPIOC_CLK_OFF+0x1c>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a04      	ldr	r2, [pc, #16]	@ (8000398 <GPIOC_CLK_OFF+0x1c>)
 8000386:	f023 0304 	bic.w	r3, r3, #4
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <GPIOD_CLK_ON>:

void GPIOD_CLK_ON(void) { 
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 3); 
 80003a0:	4b05      	ldr	r3, [pc, #20]	@ (80003b8 <GPIOD_CLK_ON+0x1c>)
 80003a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <GPIOD_CLK_ON+0x1c>)
 80003a6:	f043 0308 	orr.w	r3, r3, #8
 80003aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ac:	bf00      	nop
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40023800 	.word	0x40023800

080003bc <GPIOD_CLK_OFF>:

void GPIOD_CLK_OFF(void) { 
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 3); 
 80003c0:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <GPIOD_CLK_OFF+0x1c>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c4:	4a04      	ldr	r2, [pc, #16]	@ (80003d8 <GPIOD_CLK_OFF+0x1c>)
 80003c6:	f023 0308 	bic.w	r3, r3, #8
 80003ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	40023800 	.word	0x40023800

080003dc <GPIOE_CLK_ON>:

void GPIOE_CLK_ON(void) { 
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 4); 
 80003e0:	4b05      	ldr	r3, [pc, #20]	@ (80003f8 <GPIOE_CLK_ON+0x1c>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a04      	ldr	r2, [pc, #16]	@ (80003f8 <GPIOE_CLK_ON+0x1c>)
 80003e6:	f043 0310 	orr.w	r3, r3, #16
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40023800 	.word	0x40023800

080003fc <GPIOE_CLK_OFF>:

void GPIOE_CLK_OFF(void) { 
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 4); 
 8000400:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <GPIOE_CLK_OFF+0x1c>)
 8000402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000404:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <GPIOE_CLK_OFF+0x1c>)
 8000406:	f023 0310 	bic.w	r3, r3, #16
 800040a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr
 8000416:	bf00      	nop
 8000418:	40023800 	.word	0x40023800

0800041c <GPIOF_CLK_ON>:

void GPIOF_CLK_ON(void) { 
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 5); 
 8000420:	4b05      	ldr	r3, [pc, #20]	@ (8000438 <GPIOF_CLK_ON+0x1c>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a04      	ldr	r2, [pc, #16]	@ (8000438 <GPIOF_CLK_ON+0x1c>)
 8000426:	f043 0320 	orr.w	r3, r3, #32
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr
 8000436:	bf00      	nop
 8000438:	40023800 	.word	0x40023800

0800043c <GPIOF_CLK_OFF>:

void GPIOF_CLK_OFF(void) { 
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 5); 
 8000440:	4b05      	ldr	r3, [pc, #20]	@ (8000458 <GPIOF_CLK_OFF+0x1c>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <GPIOF_CLK_OFF+0x1c>)
 8000446:	f023 0320 	bic.w	r3, r3, #32
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	40023800 	.word	0x40023800

0800045c <GPIOG_CLK_ON>:

void GPIOG_CLK_ON(void) { 
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 6); 
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <GPIOG_CLK_ON+0x1c>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000464:	4a04      	ldr	r2, [pc, #16]	@ (8000478 <GPIOG_CLK_ON+0x1c>)
 8000466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40023800 	.word	0x40023800

0800047c <GPIOG_CLK_OFF>:

void GPIOG_CLK_OFF(void) { 
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 6); 
 8000480:	4b05      	ldr	r3, [pc, #20]	@ (8000498 <GPIOG_CLK_OFF+0x1c>)
 8000482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <GPIOG_CLK_OFF+0x1c>)
 8000486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800048a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
 8000496:	bf00      	nop
 8000498:	40023800 	.word	0x40023800

0800049c <GPIOH_CLK_ON>:

void GPIOH_CLK_ON(void) { 
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 7); 
 80004a0:	4b05      	ldr	r3, [pc, #20]	@ (80004b8 <GPIOH_CLK_ON+0x1c>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a4:	4a04      	ldr	r2, [pc, #16]	@ (80004b8 <GPIOH_CLK_ON+0x1c>)
 80004a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004aa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	40023800 	.word	0x40023800

080004bc <GPIOH_CLK_OFF>:

void GPIOH_CLK_OFF(void) { 
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 7); 
 80004c0:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <GPIOH_CLK_OFF+0x1c>)
 80004c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c4:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <GPIOH_CLK_OFF+0x1c>)
 80004c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ca:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004cc:	bf00      	nop
 80004ce:	46bd      	mov	sp, r7
 80004d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	40023800 	.word	0x40023800

080004dc <GPIOI_CLK_ON>:

void GPIOI_CLK_ON(void) { 
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 8); 
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <GPIOI_CLK_ON+0x1c>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a04      	ldr	r2, [pc, #16]	@ (80004f8 <GPIOI_CLK_ON+0x1c>)
 80004e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40023800 	.word	0x40023800

080004fc <GPIOI_CLK_OFF>:

void GPIOI_CLK_OFF(void) { 
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 8); 
 8000500:	4b05      	ldr	r3, [pc, #20]	@ (8000518 <GPIOI_CLK_OFF+0x1c>)
 8000502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000504:	4a04      	ldr	r2, [pc, #16]	@ (8000518 <GPIOI_CLK_OFF+0x1c>)
 8000506:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800050a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <GPIO_PeriClockControl>:
	{GPIOH, GPIOH_RESET},
	{GPIOI, GPIOI_RESET}
};

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,		
						  uint8_t ON_OFF){
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	460b      	mov	r3, r1
 8000526:	70fb      	strb	r3, [r7, #3]

	   for (int i = 0; i < NB_GPIO_PORTS; ++i) {
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	e026      	b.n	800057c <GPIO_PeriClockControl+0x60>

        if (gpio_clk_map[i].base == pGPIOx) {
 800052e:	4917      	ldr	r1, [pc, #92]	@ (800058c <GPIO_PeriClockControl+0x70>)
 8000530:	68fa      	ldr	r2, [r7, #12]
 8000532:	4613      	mov	r3, r2
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	4413      	add	r3, r2
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	440b      	add	r3, r1
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	687a      	ldr	r2, [r7, #4]
 8000540:	429a      	cmp	r2, r3
 8000542:	d118      	bne.n	8000576 <GPIO_PeriClockControl+0x5a>
            if (ON_OFF == ON)
 8000544:	78fb      	ldrb	r3, [r7, #3]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d10a      	bne.n	8000560 <GPIO_PeriClockControl+0x44>
                gpio_clk_map[i].clk_on();
 800054a:	4910      	ldr	r1, [pc, #64]	@ (800058c <GPIO_PeriClockControl+0x70>)
 800054c:	68fa      	ldr	r2, [r7, #12]
 800054e:	4613      	mov	r3, r2
 8000550:	005b      	lsls	r3, r3, #1
 8000552:	4413      	add	r3, r2
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	440b      	add	r3, r1
 8000558:	3304      	adds	r3, #4
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4798      	blx	r3
            else
                gpio_clk_map[i].clk_off();
            break;
 800055e:	e011      	b.n	8000584 <GPIO_PeriClockControl+0x68>
                gpio_clk_map[i].clk_off();
 8000560:	490a      	ldr	r1, [pc, #40]	@ (800058c <GPIO_PeriClockControl+0x70>)
 8000562:	68fa      	ldr	r2, [r7, #12]
 8000564:	4613      	mov	r3, r2
 8000566:	005b      	lsls	r3, r3, #1
 8000568:	4413      	add	r3, r2
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	440b      	add	r3, r1
 800056e:	3308      	adds	r3, #8
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4798      	blx	r3
            break;
 8000574:	e006      	b.n	8000584 <GPIO_PeriClockControl+0x68>
	   for (int i = 0; i < NB_GPIO_PORTS; ++i) {
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	3301      	adds	r3, #1
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b08      	cmp	r3, #8
 8000580:	d9d5      	bls.n	800052e <GPIO_PeriClockControl+0x12>
        }
    } /* End for loop for all ports */


} /* End GPIO_PeriClockControl() */
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000000 	.word	0x20000000

08000590 <GPIO_Init>:

// =========================================================


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	

	//1. we speicify if we are in 
	// Interrupt or non interrupt mode

	if(pGPIOHandle->gpio_pin_conf.GPIO_PinMode < ANALOG){
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	2b02      	cmp	r3, #2
 800059e:	f200 80b0 	bhi.w	8000702 <GPIO_Init+0x172>
	// Here we are in non interrupt mode	

	// 1.1. Configure the mode of the pin

	// Clear the bits first
	pGPIOHandle->gpio_reg_x->MODER &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	791b      	ldrb	r3, [r3, #4]
 80005ac:	005b      	lsls	r3, r3, #1
 80005ae:	2103      	movs	r1, #3
 80005b0:	fa01 f303 	lsl.w	r3, r1, r3
 80005b4:	43db      	mvns	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	400a      	ands	r2, r1
 80005be:	601a      	str	r2, [r3, #0]
	// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number	
	
	// Now we can set the mode
	pGPIOHandle->gpio_reg_x->MODER |=  pGPIOHandle->gpio_pin_conf.GPIO_PinMode << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);	 
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	681a      	ldr	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	005b      	lsls	r3, r3, #1
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	4619      	mov	r1, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	430a      	orrs	r2, r1
 80005de:	601a      	str	r2, [r3, #0]
	
	// Now we start by the othe registers, speed, output type, pull up and pull down resistor

	// 1.2. Configure the speed 
		// Clear the bits first
	pGPIOHandle->gpio_reg_x->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2103      	movs	r1, #3
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	4619      	mov	r1, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	400a      	ands	r2, r1
 80005fc:	609a      	str	r2, [r3, #8]
		// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number
	
		// Now we can set the speed
	pGPIOHandle->gpio_reg_x->OSPEEDR |= (pGPIOHandle->gpio_pin_conf.GPIO_PinSpeed << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	799b      	ldrb	r3, [r3, #6]
 8000608:	4619      	mov	r1, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	005b      	lsls	r3, r3, #1
 8000610:	fa01 f303 	lsl.w	r3, r1, r3
 8000614:	4619      	mov	r1, r3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	430a      	orrs	r2, r1
 800061c:	609a      	str	r2, [r3, #8]

	// 1.3. Configure the output type

	//Clear the bits first
	pGPIOHandle->gpio_reg_x->OTYPER &= ~(0x1 << pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	4619      	mov	r1, r3
 800062a:	2301      	movs	r3, #1
 800062c:	408b      	lsls	r3, r1
 800062e:	43db      	mvns	r3, r3
 8000630:	4619      	mov	r1, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	400a      	ands	r2, r1
 8000638:	605a      	str	r2, [r3, #4]
	// 0x1 is 01 in binary, so we clear the bit corresponding to the pin number
	
	// Now we can set the output type
	pGPIOHandle->gpio_reg_x->OTYPER |= (pGPIOHandle->gpio_pin_conf.GPIO_PinOPType << pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	685a      	ldr	r2, [r3, #4]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	7a1b      	ldrb	r3, [r3, #8]
 8000644:	4619      	mov	r1, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	4619      	mov	r1, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	430a      	orrs	r2, r1
 8000656:	605a      	str	r2, [r3, #4]

	// 1.4. Configure the pull up and pull down resistor

	// Clear the bits first
	pGPIOHandle->gpio_reg_x->PUPDR &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	68da      	ldr	r2, [r3, #12]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	2103      	movs	r1, #3
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	400a      	ands	r2, r1
 8000674:	60da      	str	r2, [r3, #12]
	// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number
	
	// Now we can set the pull up and pull down resistor
	pGPIOHandle->gpio_reg_x->PUPDR |= (pGPIOHandle->gpio_pin_conf.GPIO_PinPuPdControl << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68da      	ldr	r2, [r3, #12]
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	79db      	ldrb	r3, [r3, #7]
 8000680:	4619      	mov	r1, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	fa01 f303 	lsl.w	r3, r1, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	430a      	orrs	r2, r1
 8000694:	60da      	str	r2, [r3, #12]

	/* Configure alternate function*/

	if (pGPIOHandle->gpio_pin_conf.GPIO_PinMode == ALT){
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	795b      	ldrb	r3, [r3, #5]
 800069a:	2b02      	cmp	r3, #2
 800069c:	d131      	bne.n	8000702 <GPIO_Init+0x172>

		uint8_t temp1, temp2;
		
		temp1 = pGPIOHandle->gpio_pin_conf.GPIO_PinNumber/8;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	08db      	lsrs	r3, r3, #3
 80006a4:	73fb      	strb	r3, [r7, #15]
		// this will give us the index of the AFR register
		// if AFR[0] or AFR[1]

		// Now which bit position in the AFR register
		temp2 = pGPIOHandle->gpio_pin_conf.GPIO_PinNumber % 8;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	f003 0307 	and.w	r3, r3, #7
 80006ae:	73bb      	strb	r3, [r7, #14]

		// Clearing the bits in the AFR register first
		pGPIOHandle->gpio_reg_x->AFR[temp1] &= ~(0xF << (4 * temp2));
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	7bfa      	ldrb	r2, [r7, #15]
 80006b6:	3208      	adds	r2, #8
 80006b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006bc:	7bbb      	ldrb	r3, [r7, #14]
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	220f      	movs	r2, #15
 80006c2:	fa02 f303 	lsl.w	r3, r2, r3
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7bfa      	ldrb	r2, [r7, #15]
 80006d0:	4001      	ands	r1, r0
 80006d2:	3208      	adds	r2, #8
 80006d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// 0xF is 1111, so we clear the 4 bits corresponding to the pin number

		// Now we can set the alternate function register  
		pGPIOHandle->gpio_reg_x->AFR[temp1] |= (pGPIOHandle->gpio_pin_conf.GPIO_PinAltFunMode << (4 * temp2));
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	3208      	adds	r2, #8
 80006e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a5b      	ldrb	r3, [r3, #9]
 80006e8:	461a      	mov	r2, r3
 80006ea:	7bbb      	ldrb	r3, [r7, #14]
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	fa02 f303 	lsl.w	r3, r2, r3
 80006f2:	4618      	mov	r0, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	7bfa      	ldrb	r2, [r7, #15]
 80006fa:	4301      	orrs	r1, r0
 80006fc:	3208      	adds	r2, #8
 80006fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	} /* End if(pin Mode< ANALOG) */


}/* End GPIO_Init()   */
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr

0800070e <GPIO_ReadFromInputPin>:

} /* End GPIO_DeInit() */


uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,
							  uint8_t PinNumber){
 800070e:	b480      	push	{r7}
 8000710:	b085      	sub	sp, #20
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	70fb      	strb	r3, [r7, #3]


uint8_t value;

value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x1) ;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	691a      	ldr	r2, [r3, #16]
 800071e:	78fb      	ldrb	r3, [r7, #3]
 8000720:	fa22 f303 	lsr.w	r3, r2, r3
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]

Don't forget to cast the result to uint8_t


*/
return value;
 800072c:	7bfb      	ldrb	r3, [r7, #15]



} /* End GPIO_ReadFromInputPin() */
 800072e:	4618      	mov	r0, r3
 8000730:	3714      	adds	r7, #20
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr

0800073a <GPIO_ToggleOutputPin>:
pGPIOx->ODR = Value; // Write value to the entire ODR register

} /* End GPIO_WriteToOutputPort() */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, 
                         uint8_t PinNumber){
 800073a:	b480      	push	{r7}
 800073c:	b083      	sub	sp, #12
 800073e:	af00      	add	r7, sp, #0
 8000740:	6078      	str	r0, [r7, #4]
 8000742:	460b      	mov	r3, r1
 8000744:	70fb      	strb	r3, [r7, #3]


	pGPIOx->ODR ^= (1 << PinNumber);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	78fa      	ldrb	r2, [r7, #3]
 800074c:	2101      	movs	r1, #1
 800074e:	fa01 f202 	lsl.w	r2, r1, r2
 8000752:	405a      	eors	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	615a      	str	r2, [r3, #20]
We shift 1 to the left by PinNumber to get the bit corresponding to the pin number

Then we XOR the ODR register with this value */


} /* End GPIO_ToggleOutputPin() */
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <__libc_init_array>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	4d0d      	ldr	r5, [pc, #52]	@ (800079c <__libc_init_array+0x38>)
 8000768:	4c0d      	ldr	r4, [pc, #52]	@ (80007a0 <__libc_init_array+0x3c>)
 800076a:	1b64      	subs	r4, r4, r5
 800076c:	10a4      	asrs	r4, r4, #2
 800076e:	2600      	movs	r6, #0
 8000770:	42a6      	cmp	r6, r4
 8000772:	d109      	bne.n	8000788 <__libc_init_array+0x24>
 8000774:	4d0b      	ldr	r5, [pc, #44]	@ (80007a4 <__libc_init_array+0x40>)
 8000776:	4c0c      	ldr	r4, [pc, #48]	@ (80007a8 <__libc_init_array+0x44>)
 8000778:	f000 f818 	bl	80007ac <_init>
 800077c:	1b64      	subs	r4, r4, r5
 800077e:	10a4      	asrs	r4, r4, #2
 8000780:	2600      	movs	r6, #0
 8000782:	42a6      	cmp	r6, r4
 8000784:	d105      	bne.n	8000792 <__libc_init_array+0x2e>
 8000786:	bd70      	pop	{r4, r5, r6, pc}
 8000788:	f855 3b04 	ldr.w	r3, [r5], #4
 800078c:	4798      	blx	r3
 800078e:	3601      	adds	r6, #1
 8000790:	e7ee      	b.n	8000770 <__libc_init_array+0xc>
 8000792:	f855 3b04 	ldr.w	r3, [r5], #4
 8000796:	4798      	blx	r3
 8000798:	3601      	adds	r6, #1
 800079a:	e7f2      	b.n	8000782 <__libc_init_array+0x1e>
 800079c:	080007c4 	.word	0x080007c4
 80007a0:	080007c4 	.word	0x080007c4
 80007a4:	080007c4 	.word	0x080007c4
 80007a8:	080007c8 	.word	0x080007c8

080007ac <_init>:
 80007ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ae:	bf00      	nop
 80007b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b2:	bc08      	pop	{r3}
 80007b4:	469e      	mov	lr, r3
 80007b6:	4770      	bx	lr

080007b8 <_fini>:
 80007b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ba:	bf00      	nop
 80007bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007be:	bc08      	pop	{r3}
 80007c0:	469e      	mov	lr, r3
 80007c2:	4770      	bx	lr
