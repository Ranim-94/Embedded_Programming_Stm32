
gpio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000640  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007c8  080007c8  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007c8  080007c8  0000206c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080007c8  080007c8  0000206c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080007c8  080007c8  0000206c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007c8  080007c8  000017c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007cc  080007cc  000017cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  080007d0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000206c  2**0
                  CONTENTS
 10 .bss          0000001c  2000006c  2000006c  0000206c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000088  20000088  0000206c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000c8b  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000038c  00000000  00000000  00002d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  000030b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010f0  00000000  00000000  0000334b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d36  00000000  00000000  0000443b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004793  00000000  00000000  00005171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00009904  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000052c  00000000  00000000  00009948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00009e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000006c 	.word	0x2000006c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080007b0 	.word	0x080007b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000070 	.word	0x20000070
 80001c4:	080007b0 	.word	0x080007b0

080001c8 <delay>:

#define CYCLE 5e5

#define RUN_SOFT 1

void delay(){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0

	for(int i=0; i<CYCLE; i++){
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	ddf8      	ble.n	80001d4 <delay+0xc>

	}

} /* End delay*()*/
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0007a11f 	.word	0x0007a11f

080001f4 <main>:

int main(void){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0

// Instantiate structures for button and LED
GPIO_Handle_t gpio_button, gpio_led;

// Configure PA0 as input (USER BUTTON)
gpio_button.gpio_reg_x = GPIOA;
 80001fa:	4b22      	ldr	r3, [pc, #136]	@ (8000284 <main+0x90>)
 80001fc:	613b      	str	r3, [r7, #16]
gpio_button.gpio_pin_conf.GPIO_PinNumber = GPIO_PIN_0;
 80001fe:	2300      	movs	r3, #0
 8000200:	753b      	strb	r3, [r7, #20]
gpio_button.gpio_pin_conf.GPIO_PinMode = IN;
 8000202:	2300      	movs	r3, #0
 8000204:	757b      	strb	r3, [r7, #21]
gpio_button.gpio_pin_conf.GPIO_PinSpeed = LOW;
 8000206:	2300      	movs	r3, #0
 8000208:	75bb      	strb	r3, [r7, #22]
gpio_button.gpio_pin_conf.GPIO_PinPuPdControl = NO_PULLUP; // External pull-down on Discovery board
 800020a:	2300      	movs	r3, #0
 800020c:	75fb      	strb	r3, [r7, #23]

// Configure PD12 as output (LED) - or use PD12 for Discovery board LED
gpio_led.gpio_reg_x = GPIOD; // Change to GPIOD for Discovery board
 800020e:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <main+0x94>)
 8000210:	607b      	str	r3, [r7, #4]

// PD12 is the green LED on Discovery
gpio_led.gpio_pin_conf.GPIO_PinNumber = GPIO_PIN_12; 
 8000212:	230c      	movs	r3, #12
 8000214:	723b      	strb	r3, [r7, #8]
gpio_led.gpio_pin_conf.GPIO_PinMode = OUT;
 8000216:	2301      	movs	r3, #1
 8000218:	727b      	strb	r3, [r7, #9]
gpio_led.gpio_pin_conf.GPIO_PinSpeed = HIGH;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]
gpio_led.gpio_pin_conf.GPIO_PinOPType = PUSH_PULL;
 800021e:	2300      	movs	r3, #0
 8000220:	733b      	strb	r3, [r7, #12]
gpio_led.gpio_pin_conf.GPIO_PinPuPdControl = NO_PULLUP;
 8000222:	2300      	movs	r3, #0
 8000224:	72fb      	strb	r3, [r7, #11]

// Enable clocks for both GPIO ports
GPIO_PeriClockControl(GPIOA, ON); // For button
 8000226:	2101      	movs	r1, #1
 8000228:	4816      	ldr	r0, [pc, #88]	@ (8000284 <main+0x90>)
 800022a:	f000 f979 	bl	8000520 <GPIO_PeriClockControl>
GPIO_PeriClockControl(GPIOD, ON); // For LED
 800022e:	2101      	movs	r1, #1
 8000230:	4815      	ldr	r0, [pc, #84]	@ (8000288 <main+0x94>)
 8000232:	f000 f975 	bl	8000520 <GPIO_PeriClockControl>

// Initialize both GPIO configurations
GPIO_Init(&gpio_button);
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	4618      	mov	r0, r3
 800023c:	f000 f9aa 	bl	8000594 <GPIO_Init>
GPIO_Init(&gpio_led);
 8000240:	1d3b      	adds	r3, r7, #4
 8000242:	4618      	mov	r0, r3
 8000244:	f000 f9a6 	bl	8000594 <GPIO_Init>

	uint8_t last_button_state = 0;
 8000248:	2300      	movs	r3, #0
 800024a:	77fb      	strb	r3, [r7, #31]
	
	while(1){

		uint8_t current_button_state = GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0);
 800024c:	2100      	movs	r1, #0
 800024e:	480d      	ldr	r0, [pc, #52]	@ (8000284 <main+0x90>)
 8000250:	f000 fa5f 	bl	8000712 <GPIO_ReadFromInputPin>
 8000254:	4603      	mov	r3, r0
 8000256:	77bb      	strb	r3, [r7, #30]
		
		// Detect button press (rising edge) - button is normally low, high when pressed
		if(current_button_state == 1 && last_button_state == 0){
 8000258:	7fbb      	ldrb	r3, [r7, #30]
 800025a:	2b01      	cmp	r3, #1
 800025c:	d10f      	bne.n	800027e <main+0x8a>
 800025e:	7ffb      	ldrb	r3, [r7, #31]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10c      	bne.n	800027e <main+0x8a>
			delay(); // Simple debouncing
 8000264:	f7ff ffb0 	bl	80001c8 <delay>
			// Re-read after delay to confirm button is still pressed
			if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0) == 1){
 8000268:	2100      	movs	r1, #0
 800026a:	4806      	ldr	r0, [pc, #24]	@ (8000284 <main+0x90>)
 800026c:	f000 fa51 	bl	8000712 <GPIO_ReadFromInputPin>
 8000270:	4603      	mov	r3, r0
 8000272:	2b01      	cmp	r3, #1
 8000274:	d103      	bne.n	800027e <main+0x8a>
				GPIO_ToggleOutputPin(GPIOD, GPIO_PIN_12); // Toggle LED
 8000276:	210c      	movs	r1, #12
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <main+0x94>)
 800027a:	f000 fa60 	bl	800073e <GPIO_ToggleOutputPin>
			}
		}
		
		last_button_state = current_button_state;
 800027e:	7fbb      	ldrb	r3, [r7, #30]
 8000280:	77fb      	strb	r3, [r7, #31]
	while(1){
 8000282:	e7e3      	b.n	800024c <main+0x58>
 8000284:	40020000 	.word	0x40020000
 8000288:	40020c00 	.word	0x40020c00

0800028c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800028c:	480d      	ldr	r0, [pc, #52]	@ (80002c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800028e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000290:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000296:	490d      	ldr	r1, [pc, #52]	@ (80002cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000298:	4a0d      	ldr	r2, [pc, #52]	@ (80002d0 <LoopForever+0xe>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800029c:	e002      	b.n	80002a4 <LoopCopyDataInit>

0800029e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800029e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a2:	3304      	adds	r3, #4

080002a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a8:	d3f9      	bcc.n	800029e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002aa:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002ac:	4c0a      	ldr	r4, [pc, #40]	@ (80002d8 <LoopForever+0x16>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b0:	e001      	b.n	80002b6 <LoopFillZerobss>

080002b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b4:	3204      	adds	r2, #4

080002b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b8:	d3fb      	bcc.n	80002b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ba:	f000 fa55 	bl	8000768 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002be:	f7ff ff99 	bl	80001f4 <main>

080002c2 <LoopForever>:

LoopForever:
  b LoopForever
 80002c2:	e7fe      	b.n	80002c2 <LoopForever>
  ldr   r0, =_estack
 80002c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80002d0:	080007d0 	.word	0x080007d0
  ldr r2, =_sbss
 80002d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80002d8:	20000088 	.word	0x20000088

080002dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002dc:	e7fe      	b.n	80002dc <ADC_IRQHandler>
	...

080002e0 <GPIOA_CLK_ON>:

#include "gpio_driver.h"

// GPIO Clock control functions
void GPIOA_CLK_ON(void) { 
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 0); 
 80002e4:	4b05      	ldr	r3, [pc, #20]	@ (80002fc <GPIOA_CLK_ON+0x1c>)
 80002e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e8:	4a04      	ldr	r2, [pc, #16]	@ (80002fc <GPIOA_CLK_ON+0x1c>)
 80002ea:	f043 0301 	orr.w	r3, r3, #1
 80002ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002f0:	bf00      	nop
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	40023800 	.word	0x40023800

08000300 <GPIOA_CLK_OFF>:

void GPIOA_CLK_OFF(void) { 
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 0); 
 8000304:	4b05      	ldr	r3, [pc, #20]	@ (800031c <GPIOA_CLK_OFF+0x1c>)
 8000306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000308:	4a04      	ldr	r2, [pc, #16]	@ (800031c <GPIOA_CLK_OFF+0x1c>)
 800030a:	f023 0301 	bic.w	r3, r3, #1
 800030e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800

08000320 <GPIOB_CLK_ON>:

void GPIOB_CLK_ON(void) { 
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 1); 
 8000324:	4b05      	ldr	r3, [pc, #20]	@ (800033c <GPIOB_CLK_ON+0x1c>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000328:	4a04      	ldr	r2, [pc, #16]	@ (800033c <GPIOB_CLK_ON+0x1c>)
 800032a:	f043 0302 	orr.w	r3, r3, #2
 800032e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40023800 	.word	0x40023800

08000340 <GPIOB_CLK_OFF>:

void GPIOB_CLK_OFF(void) { 
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 1); 
 8000344:	4b05      	ldr	r3, [pc, #20]	@ (800035c <GPIOB_CLK_OFF+0x1c>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <GPIOB_CLK_OFF+0x1c>)
 800034a:	f023 0302 	bic.w	r3, r3, #2
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800

08000360 <GPIOC_CLK_ON>:

void GPIOC_CLK_ON(void) { 
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 2); 
 8000364:	4b05      	ldr	r3, [pc, #20]	@ (800037c <GPIOC_CLK_ON+0x1c>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000368:	4a04      	ldr	r2, [pc, #16]	@ (800037c <GPIOC_CLK_ON+0x1c>)
 800036a:	f043 0304 	orr.w	r3, r3, #4
 800036e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop
 800037c:	40023800 	.word	0x40023800

08000380 <GPIOC_CLK_OFF>:

void GPIOC_CLK_OFF(void) { 
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 2); 
 8000384:	4b05      	ldr	r3, [pc, #20]	@ (800039c <GPIOC_CLK_OFF+0x1c>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <GPIOC_CLK_OFF+0x1c>)
 800038a:	f023 0304 	bic.w	r3, r3, #4
 800038e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40023800 	.word	0x40023800

080003a0 <GPIOD_CLK_ON>:

void GPIOD_CLK_ON(void) { 
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 3); 
 80003a4:	4b05      	ldr	r3, [pc, #20]	@ (80003bc <GPIOD_CLK_ON+0x1c>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a04      	ldr	r2, [pc, #16]	@ (80003bc <GPIOD_CLK_ON+0x1c>)
 80003aa:	f043 0308 	orr.w	r3, r3, #8
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800

080003c0 <GPIOD_CLK_OFF>:

void GPIOD_CLK_OFF(void) { 
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 3); 
 80003c4:	4b05      	ldr	r3, [pc, #20]	@ (80003dc <GPIOD_CLK_OFF+0x1c>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a04      	ldr	r2, [pc, #16]	@ (80003dc <GPIOD_CLK_OFF+0x1c>)
 80003ca:	f023 0308 	bic.w	r3, r3, #8
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	40023800 	.word	0x40023800

080003e0 <GPIOE_CLK_ON>:

void GPIOE_CLK_ON(void) { 
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 4); 
 80003e4:	4b05      	ldr	r3, [pc, #20]	@ (80003fc <GPIOE_CLK_ON+0x1c>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e8:	4a04      	ldr	r2, [pc, #16]	@ (80003fc <GPIOE_CLK_ON+0x1c>)
 80003ea:	f043 0310 	orr.w	r3, r3, #16
 80003ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f0:	bf00      	nop
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023800 	.word	0x40023800

08000400 <GPIOE_CLK_OFF>:

void GPIOE_CLK_OFF(void) { 
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 4); 
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <GPIOE_CLK_OFF+0x1c>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a04      	ldr	r2, [pc, #16]	@ (800041c <GPIOE_CLK_OFF+0x1c>)
 800040a:	f023 0310 	bic.w	r3, r3, #16
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40023800 	.word	0x40023800

08000420 <GPIOF_CLK_ON>:

void GPIOF_CLK_ON(void) { 
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 5); 
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <GPIOF_CLK_ON+0x1c>)
 8000426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000428:	4a04      	ldr	r2, [pc, #16]	@ (800043c <GPIOF_CLK_ON+0x1c>)
 800042a:	f043 0320 	orr.w	r3, r3, #32
 800042e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40023800 	.word	0x40023800

08000440 <GPIOF_CLK_OFF>:

void GPIOF_CLK_OFF(void) { 
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 5); 
 8000444:	4b05      	ldr	r3, [pc, #20]	@ (800045c <GPIOF_CLK_OFF+0x1c>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a04      	ldr	r2, [pc, #16]	@ (800045c <GPIOF_CLK_OFF+0x1c>)
 800044a:	f023 0320 	bic.w	r3, r3, #32
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40023800 	.word	0x40023800

08000460 <GPIOG_CLK_ON>:

void GPIOG_CLK_ON(void) { 
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 6); 
 8000464:	4b05      	ldr	r3, [pc, #20]	@ (800047c <GPIOG_CLK_ON+0x1c>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a04      	ldr	r2, [pc, #16]	@ (800047c <GPIOG_CLK_ON+0x1c>)
 800046a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	bf00      	nop
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800

08000480 <GPIOG_CLK_OFF>:

void GPIOG_CLK_OFF(void) { 
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 6); 
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <GPIOG_CLK_OFF+0x1c>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000488:	4a04      	ldr	r2, [pc, #16]	@ (800049c <GPIOG_CLK_OFF+0x1c>)
 800048a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800048e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000490:	bf00      	nop
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr
 800049a:	bf00      	nop
 800049c:	40023800 	.word	0x40023800

080004a0 <GPIOH_CLK_ON>:

void GPIOH_CLK_ON(void) { 
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 7); 
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <GPIOH_CLK_ON+0x1c>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a04      	ldr	r2, [pc, #16]	@ (80004bc <GPIOH_CLK_ON+0x1c>)
 80004aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	bf00      	nop
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40023800 	.word	0x40023800

080004c0 <GPIOH_CLK_OFF>:

void GPIOH_CLK_OFF(void) { 
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 7); 
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <GPIOH_CLK_OFF+0x1c>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c8:	4a04      	ldr	r2, [pc, #16]	@ (80004dc <GPIOH_CLK_OFF+0x1c>)
 80004ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80004ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40023800 	.word	0x40023800

080004e0 <GPIOI_CLK_ON>:

void GPIOI_CLK_ON(void) { 
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= (1 << 8); 
 80004e4:	4b05      	ldr	r3, [pc, #20]	@ (80004fc <GPIOI_CLK_ON+0x1c>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e8:	4a04      	ldr	r2, [pc, #16]	@ (80004fc <GPIOI_CLK_ON+0x1c>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004ee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f0:	bf00      	nop
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800

08000500 <GPIOI_CLK_OFF>:

void GPIOI_CLK_OFF(void) { 
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
    RCC->AHB1ENR &= ~(1 << 8); 
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <GPIOI_CLK_OFF+0x1c>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <GPIOI_CLK_OFF+0x1c>)
 800050a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800050e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40023800 	.word	0x40023800

08000520 <GPIO_PeriClockControl>:
	{GPIOH, GPIOH_RESET},
	{GPIOI, GPIOI_RESET}
};

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx,		
						  uint8_t ON_OFF){
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]

	   for (int i = 0; i < NB_GPIO_PORTS; ++i) {
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e026      	b.n	8000580 <GPIO_PeriClockControl+0x60>

        if (gpio_clk_map[i].base == pGPIOx) {
 8000532:	4917      	ldr	r1, [pc, #92]	@ (8000590 <GPIO_PeriClockControl+0x70>)
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	4613      	mov	r3, r2
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	4413      	add	r3, r2
 800053c:	009b      	lsls	r3, r3, #2
 800053e:	440b      	add	r3, r1
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	429a      	cmp	r2, r3
 8000546:	d118      	bne.n	800057a <GPIO_PeriClockControl+0x5a>
            if (ON_OFF == ON)
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10a      	bne.n	8000564 <GPIO_PeriClockControl+0x44>
                gpio_clk_map[i].clk_on();
 800054e:	4910      	ldr	r1, [pc, #64]	@ (8000590 <GPIO_PeriClockControl+0x70>)
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	4613      	mov	r3, r2
 8000554:	005b      	lsls	r3, r3, #1
 8000556:	4413      	add	r3, r2
 8000558:	009b      	lsls	r3, r3, #2
 800055a:	440b      	add	r3, r1
 800055c:	3304      	adds	r3, #4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4798      	blx	r3
            else
                gpio_clk_map[i].clk_off();
            break;
 8000562:	e011      	b.n	8000588 <GPIO_PeriClockControl+0x68>
                gpio_clk_map[i].clk_off();
 8000564:	490a      	ldr	r1, [pc, #40]	@ (8000590 <GPIO_PeriClockControl+0x70>)
 8000566:	68fa      	ldr	r2, [r7, #12]
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	440b      	add	r3, r1
 8000572:	3308      	adds	r3, #8
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4798      	blx	r3
            break;
 8000578:	e006      	b.n	8000588 <GPIO_PeriClockControl+0x68>
	   for (int i = 0; i < NB_GPIO_PORTS; ++i) {
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	3301      	adds	r3, #1
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	2b08      	cmp	r3, #8
 8000584:	d9d5      	bls.n	8000532 <GPIO_PeriClockControl+0x12>
        }
    } /* End for loop for all ports */


} /* End GPIO_PeriClockControl() */
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000000 	.word	0x20000000

08000594 <GPIO_Init>:

// =========================================================


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	

	//1. we speicify if we are in 
	// Interrupt or non interrupt mode

	if(pGPIOHandle->gpio_pin_conf.GPIO_PinMode < ANALOG){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	2b02      	cmp	r3, #2
 80005a2:	f200 80b0 	bhi.w	8000706 <GPIO_Init+0x172>
	// Here we are in non interrupt mode	

	// 1.1. Configure the mode of the pin

	// Clear the bits first
	pGPIOHandle->gpio_reg_x->MODER &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	791b      	ldrb	r3, [r3, #4]
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	2103      	movs	r1, #3
 80005b4:	fa01 f303 	lsl.w	r3, r1, r3
 80005b8:	43db      	mvns	r3, r3
 80005ba:	4619      	mov	r1, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	400a      	ands	r2, r1
 80005c2:	601a      	str	r2, [r3, #0]
	// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number	
	
	// Now we can set the mode
	pGPIOHandle->gpio_reg_x->MODER |=  pGPIOHandle->gpio_pin_conf.GPIO_PinMode << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);	 
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	795b      	ldrb	r3, [r3, #5]
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	fa01 f303 	lsl.w	r3, r1, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	430a      	orrs	r2, r1
 80005e2:	601a      	str	r2, [r3, #0]
	
	// Now we start by the othe registers, speed, output type, pull up and pull down resistor

	// 1.2. Configure the speed 
		// Clear the bits first
	pGPIOHandle->gpio_reg_x->OSPEEDR &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	2103      	movs	r1, #3
 80005f2:	fa01 f303 	lsl.w	r3, r1, r3
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4619      	mov	r1, r3
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	400a      	ands	r2, r1
 8000600:	609a      	str	r2, [r3, #8]
		// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number
	
		// Now we can set the speed
	pGPIOHandle->gpio_reg_x->OSPEEDR |= (pGPIOHandle->gpio_pin_conf.GPIO_PinSpeed << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	689a      	ldr	r2, [r3, #8]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	799b      	ldrb	r3, [r3, #6]
 800060c:	4619      	mov	r1, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	fa01 f303 	lsl.w	r3, r1, r3
 8000618:	4619      	mov	r1, r3
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	430a      	orrs	r2, r1
 8000620:	609a      	str	r2, [r3, #8]

	// 1.3. Configure the output type

	//Clear the bits first
	pGPIOHandle->gpio_reg_x->OTYPER &= ~(0x1 << pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	685a      	ldr	r2, [r3, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	4619      	mov	r1, r3
 800062e:	2301      	movs	r3, #1
 8000630:	408b      	lsls	r3, r1
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	400a      	ands	r2, r1
 800063c:	605a      	str	r2, [r3, #4]
	// 0x1 is 01 in binary, so we clear the bit corresponding to the pin number
	
	// Now we can set the output type
	pGPIOHandle->gpio_reg_x->OTYPER |= (pGPIOHandle->gpio_pin_conf.GPIO_PinOPType << pGPIOHandle->gpio_pin_conf.GPIO_PinNumber);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	685a      	ldr	r2, [r3, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	7a1b      	ldrb	r3, [r3, #8]
 8000648:	4619      	mov	r1, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	4619      	mov	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	605a      	str	r2, [r3, #4]

	// 1.4. Configure the pull up and pull down resistor

	// Clear the bits first
	pGPIOHandle->gpio_reg_x->PUPDR &= ~(0x3 << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	68da      	ldr	r2, [r3, #12]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	2103      	movs	r1, #3
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	400a      	ands	r2, r1
 8000678:	60da      	str	r2, [r3, #12]
	// 0x3 is 11 in binary, so we clear the 2 bits corresponding to the pin number
	
	// Now we can set the pull up and pull down resistor
	pGPIOHandle->gpio_reg_x->PUPDR |= (pGPIOHandle->gpio_pin_conf.GPIO_PinPuPdControl << (2 * pGPIOHandle->gpio_pin_conf.GPIO_PinNumber));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	79db      	ldrb	r3, [r3, #7]
 8000684:	4619      	mov	r1, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	791b      	ldrb	r3, [r3, #4]
 800068a:	005b      	lsls	r3, r3, #1
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	430a      	orrs	r2, r1
 8000698:	60da      	str	r2, [r3, #12]

	/* Configure alternate function*/

	if (pGPIOHandle->gpio_pin_conf.GPIO_PinMode == ALT){
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	795b      	ldrb	r3, [r3, #5]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d131      	bne.n	8000706 <GPIO_Init+0x172>

		uint8_t temp1, temp2;
		
		temp1 = pGPIOHandle->gpio_pin_conf.GPIO_PinNumber/8;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	791b      	ldrb	r3, [r3, #4]
 80006a6:	08db      	lsrs	r3, r3, #3
 80006a8:	73fb      	strb	r3, [r7, #15]
		// this will give us the index of the AFR register
		// if AFR[0] or AFR[1]

		// Now which bit position in the AFR register
		temp2 = pGPIOHandle->gpio_pin_conf.GPIO_PinNumber % 8;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	73bb      	strb	r3, [r7, #14]

		// Clearing the bits in the AFR register first
		pGPIOHandle->gpio_reg_x->AFR[temp1] &= ~(0xF << (4 * temp2));
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	7bfa      	ldrb	r2, [r7, #15]
 80006ba:	3208      	adds	r2, #8
 80006bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	220f      	movs	r2, #15
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	7bfa      	ldrb	r2, [r7, #15]
 80006d4:	4001      	ands	r1, r0
 80006d6:	3208      	adds	r2, #8
 80006d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// 0xF is 1111, so we clear the 4 bits corresponding to the pin number

		// Now we can set the alternate function register  
		pGPIOHandle->gpio_reg_x->AFR[temp1] |= (pGPIOHandle->gpio_pin_conf.GPIO_PinAltFunMode << (4 * temp2));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	7bfa      	ldrb	r2, [r7, #15]
 80006e2:	3208      	adds	r2, #8
 80006e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	7a5b      	ldrb	r3, [r3, #9]
 80006ec:	461a      	mov	r2, r3
 80006ee:	7bbb      	ldrb	r3, [r7, #14]
 80006f0:	009b      	lsls	r3, r3, #2
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	4618      	mov	r0, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	7bfa      	ldrb	r2, [r7, #15]
 80006fe:	4301      	orrs	r1, r0
 8000700:	3208      	adds	r2, #8
 8000702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


	} /* End if(pin Mode< ANALOG) */


}/* End GPIO_Init()   */
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr

08000712 <GPIO_ReadFromInputPin>:

} /* End GPIO_DeInit() */


uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx,
							  uint8_t PinNumber){
 8000712:	b480      	push	{r7}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	460b      	mov	r3, r1
 800071c:	70fb      	strb	r3, [r7, #3]


uint8_t value;

value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x1) ;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	691a      	ldr	r2, [r3, #16]
 8000722:	78fb      	ldrb	r3, [r7, #3]
 8000724:	fa22 f303 	lsr.w	r3, r2, r3
 8000728:	b2db      	uxtb	r3, r3
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	73fb      	strb	r3, [r7, #15]

Don't forget to cast the result to uint8_t


*/
return value;
 8000730:	7bfb      	ldrb	r3, [r7, #15]



} /* End GPIO_ReadFromInputPin() */
 8000732:	4618      	mov	r0, r3
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <GPIO_ToggleOutputPin>:
pGPIOx->ODR = Value; // Write value to the entire ODR register

} /* End GPIO_WriteToOutputPort() */

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, 
                         uint8_t PinNumber){
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	6078      	str	r0, [r7, #4]
 8000746:	460b      	mov	r3, r1
 8000748:	70fb      	strb	r3, [r7, #3]


	pGPIOx->ODR ^= (1 << PinNumber);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	78fa      	ldrb	r2, [r7, #3]
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	405a      	eors	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	615a      	str	r2, [r3, #20]
We shift 1 to the left by PinNumber to get the bit corresponding to the pin number

Then we XOR the ODR register with this value */


} /* End GPIO_ToggleOutputPin() */
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <__libc_init_array>:
 8000768:	b570      	push	{r4, r5, r6, lr}
 800076a:	4d0d      	ldr	r5, [pc, #52]	@ (80007a0 <__libc_init_array+0x38>)
 800076c:	4c0d      	ldr	r4, [pc, #52]	@ (80007a4 <__libc_init_array+0x3c>)
 800076e:	1b64      	subs	r4, r4, r5
 8000770:	10a4      	asrs	r4, r4, #2
 8000772:	2600      	movs	r6, #0
 8000774:	42a6      	cmp	r6, r4
 8000776:	d109      	bne.n	800078c <__libc_init_array+0x24>
 8000778:	4d0b      	ldr	r5, [pc, #44]	@ (80007a8 <__libc_init_array+0x40>)
 800077a:	4c0c      	ldr	r4, [pc, #48]	@ (80007ac <__libc_init_array+0x44>)
 800077c:	f000 f818 	bl	80007b0 <_init>
 8000780:	1b64      	subs	r4, r4, r5
 8000782:	10a4      	asrs	r4, r4, #2
 8000784:	2600      	movs	r6, #0
 8000786:	42a6      	cmp	r6, r4
 8000788:	d105      	bne.n	8000796 <__libc_init_array+0x2e>
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000790:	4798      	blx	r3
 8000792:	3601      	adds	r6, #1
 8000794:	e7ee      	b.n	8000774 <__libc_init_array+0xc>
 8000796:	f855 3b04 	ldr.w	r3, [r5], #4
 800079a:	4798      	blx	r3
 800079c:	3601      	adds	r6, #1
 800079e:	e7f2      	b.n	8000786 <__libc_init_array+0x1e>
 80007a0:	080007c8 	.word	0x080007c8
 80007a4:	080007c8 	.word	0x080007c8
 80007a8:	080007c8 	.word	0x080007c8
 80007ac:	080007cc 	.word	0x080007cc

080007b0 <_init>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	bf00      	nop
 80007b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b6:	bc08      	pop	{r3}
 80007b8:	469e      	mov	lr, r3
 80007ba:	4770      	bx	lr

080007bc <_fini>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	bf00      	nop
 80007c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007c2:	bc08      	pop	{r3}
 80007c4:	469e      	mov	lr, r3
 80007c6:	4770      	bx	lr
